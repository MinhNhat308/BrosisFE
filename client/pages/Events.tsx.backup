import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { 
  Calendar, 
  Clock, 
  MapPin, 
  Users, 
  Search,
  Plus,
  Filter,
  Star,
  Sparkles,
  Loader2,
  Heart,
  AlertCircle,
  Upload,
  UserPlus
} from "lucide-react";
import { eventService, EventAPI } from "@/services/eventService";

export default function Events() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedFilter, setSelectedFilter] = useState("all");
  const [events, setEvents] = useState<EventAPI[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Registration modal state
  const [showRegistrationModal, setShowRegistrationModal] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<EventAPI | null>(null);
  const [registering, setRegistering] = useState(false);
  const [registrationData, setRegistrationData] = useState({
    student_name: '',
    student_id: '',
    student_image: null as File | null,
    confirmed: false
  });

  useEffect(() => {
    fetchEvents();
  }, []);

  const fetchEvents = async () => {
    try {
      setLoading(true);
      const data = await eventService.getAllEvents();
      setEvents(data);
      setError(null);
    } catch (err) {
      console.error('Error fetching events:', err);
      setError('Không thể tải danh sách sự kiện');
    } finally {
      setLoading(false);
    }
  };

  const handleRegistration = async () => {
    if (!selectedEvent || !registrationData.confirmed) return;

    try {
      setRegistering(true);
      
      // Upload ảnh lên Cloudinary với thông tin chính xác - Brothers2025
      let imageUrl = '';
      if (registrationData.student_image) {
        const cloudinaryFormData = new FormData();
        cloudinaryFormData.append('file', registrationData.student_image);
        cloudinaryFormData.append('upload_preset', 'windsnguyen');
        cloudinaryFormData.append('folder', 'Brothers2025/events');
        
        console.log('🔄 Uploading to Cloudinary...');
        console.log('📁 File:', registrationData.student_image.name);
        console.log('☁️ Cloud: diohwqeow | Preset: windsnguyen');
        
        try {
          const cloudinaryResponse = await fetch(
            'https://api.cloudinary.com/v1_1/diohwqeow/image/upload',
            {
              method: 'POST',
              body: cloudinaryFormData,
            }
          );
          
          console.log('📊 Response status:', cloudinaryResponse.status);
          
          if (cloudinaryResponse.ok) {
            const cloudinaryResult = await cloudinaryResponse.json();
            imageUrl = cloudinaryResult.secure_url;
            console.log('✅ Upload thành công:', imageUrl);
          } else {
            const errorText = await cloudinaryResponse.text();
            console.error('❌ Cloudinary error:', errorText);
            imageUrl = `📸 Upload failed (${cloudinaryResponse.status})`;
          }
        } catch (uploadError) {
          console.error('❌ Upload exception:', uploadError);
          imageUrl = '📸 Lỗi kết nối Cloudinary';
        }
      }

      // Gửi email qua EmailJS - Brothers2025
      try {
        console.log('📧 Sending email via EmailJS...');
        
        if (typeof window !== 'undefined' && (window as any).emailjs) {
          const emailData = {
            event_title: selectedEvent.title,
            event_date: selectedEvent.start_date,
            student_name: registrationData.student_name,
            student_id: registrationData.student_id,
            image_url: imageUrl,
            confirmed: registrationData.confirmed ? 'Có' : 'Không',
            current_time: new Date().toLocaleString('vi-VN'),
          };
          
          console.log('📋 Email data:', emailData);
          
          await (window as any).emailjs.send(
            'service_mgmcelk',       // Service ID đúng từ EmailJS Dashboard
            'template_npima9o',      // Template ID
            emailData,
            'VXMCL985bTWO8kVZq'     // Public Key
          );
          
          console.log('✅ Email sent successfully!');
          
          // Lưu đăng ký vào database
          try {
            console.log('💾 Saving registration to database...');
            const registrationPayload = {
              student_name: registrationData.student_name,
              student_id: registrationData.student_id,
              student_email: `${registrationData.student_id}@fpt.edu.vn`, // Auto-generate email
              image_url: imageUrl,
              notes: `Đăng ký qua hệ thống Brothers2025 - ${new Date().toLocaleString('vi-VN')}`,
            };
            
            await eventService.registerForEvent(selectedEvent.id, registrationPayload);
            console.log('✅ Registration saved to database!');
            
            // Refresh events để cập nhật số lượng đăng ký
            await fetchEvents();
            
            // Đóng modal và reset form
            setShowRegistrationModal(false);
            setRegistrationData({
              student_name: '',
              student_id: '',
              confirmed: false,
            });
            setSelectedEvent(null);
            
            alert('🎉 Đăng ký thành công! Email đã được gửi và thông tin đã được lưu vào hệ thống.');
          } catch (dbError) {
            console.error('❌ Database save failed:', dbError);
            alert('🎉 Đăng ký thành công! Email đã được gửi nhưng có lỗi khi lưu vào hệ thống. Vui lòng liên hệ ban tổ chức để xác nhận.');
          }
          
        } else {
          throw new Error('EmailJS chưa được load');
        }
      } catch (emailError: any) {
        console.error('❌ Email sending failed:', emailError);
        
        // Hiển thị thông tin chi tiết để user có thể liên hệ manual
        const errorMessage = emailError?.text || emailError?.message || 'Unknown error';
        
        if (errorMessage.includes('insufficient authentication') || errorMessage.includes('Gmail_API')) {
          alert(`🎉 Đăng ký thành công! Ảnh đã upload thành công.
          
⚠️ Tuy nhiên, hệ thống email tạm thời gặp vấn đề với Gmail API.

📧 Vui lòng gửi email thủ công đến ban tổ chức với thông tin:
• Sự kiện: ${selectedEvent.title}
• Họ tên: ${registrationData.student_name}
• MSSV: ${registrationData.student_id}
• Ảnh: ${imageUrl}
• Xác nhận tham gia: Có

Email: brothers2025@example.com`);
        } else {
          alert(`⚠️ Upload ảnh thành công nhưng không thể gửi email tự động.
          
Vui lòng liên hệ ban tổ chức với thông tin đăng ký:
• Sự kiện: ${selectedEvent.title}
• Họ tên: ${registrationData.student_name}
• MSSV: ${registrationData.student_id}
• Link ảnh: ${imageUrl}`);
        }
      }
      
      // Reset form dù email có lỗi hay không
      setRegistrationData({
        student_name: '',
        student_id: '',
        student_image: null,
        confirmed: false,
      });
      setShowRegistrationModal(false);
      
    } catch (err) {
      console.error('Registration error:', err);
      alert('Có lỗi xảy ra khi đăng ký. Vui lòng thử lại.');
    } finally {
      setRegistering(false);
    }
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setRegistrationData(prev => ({ ...prev, student_image: file }));
    }
  };

  const openRegistrationModal = (event: EventAPI) => {
    setSelectedEvent(event);
    setShowRegistrationModal(true);
  };

  const closeRegistrationModal = () => {
    setRegistrationData({
      student_name: '',
      student_id: '',
      student_image: null,
      confirmed: false,
    });
    setShowRegistrationModal(false);
    setSelectedEvent(null);
  };

  const handleLike = async (eventId: number) => {
    try {
      // await eventService.likeEvent(eventId); // Method không tồn tại
      console.log('Like event:', eventId);
      // fetchEvents(); // Tạm thời bỏ qua feature like
    } catch (err) {
      console.error('Error liking event:', err);
    }
  };

  const filteredEvents = events.filter(event => {
    const matchesSearch = event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         event.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         event.tags.some(tag => tag.tag_name.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesFilter = selectedFilter === "all" || event.status === selectedFilter;
    return matchesSearch && matchesFilter;
  });

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-cyan-50 flex items-center justify-center">
        <div className="text-center space-y-4">
          <Loader2 className="w-12 h-12 animate-spin mx-auto text-purple-600" />
          <p className="text-lg font-medium text-gray-600">Đang tải sự kiện...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-cyan-50 flex items-center justify-center">
        <div className="text-center space-y-4">
          <AlertCircle className="w-12 h-12 mx-auto text-red-500" />
          <p className="text-lg font-medium text-gray-600">{error}</p>
          <Button onClick={fetchEvents} className="bg-gradient-to-r from-purple-600 to-pink-600">
            Thử lại
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Banner Section */}
      <section className="relative h-[80vh] bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 overflow-hidden">
        {/* Background Pattern */}
        <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%239C92AC" fill-opacity="0.1"%3E%3Ccircle cx="30" cy="30" r="4"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-20"></div>
        
        {/* Floating Elements */}
        <div className="absolute top-20 left-10 w-20 h-20 bg-purple-400/20 rounded-full blur-xl animate-pulse"></div>
        <div className="absolute top-40 right-20 w-32 h-32 bg-blue-400/20 rounded-full blur-xl animate-pulse delay-1000"></div>
        <div className="absolute bottom-20 left-1/4 w-16 h-16 bg-indigo-400/20 rounded-full blur-xl animate-pulse delay-500"></div>
        
        <div className="relative z-10 h-full flex items-center">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 w-full">
            <div className="text-center text-white">
              <h1 className="text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-white via-purple-200 to-blue-200 bg-clip-text text-transparent">
                Sự Kiện Brothers2025
              </h1>
              <p className="text-xl md:text-2xl mb-8 text-purple-100 max-w-3xl mx-auto">
                Khám phá những hoạt động thú vị và bổ ích tại FPT University
              </p>
              
              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto mt-12">
                <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 hover:bg-white/20 transition-all">
                  <div className="text-4xl font-bold text-white mb-2">{events.length}</div>
                  <div className="text-purple-200">Tổng sự kiện</div>
                </div>
                <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 hover:bg-white/20 transition-all">
                  <div className="text-4xl font-bold text-white mb-2">
                    {events.filter(e => e.status === 'upcoming').length}
                  </div>
                  <div className="text-purple-200">Sắp diễn ra</div>
                </div>
                <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 hover:bg-white/20 transition-all">
                  <div className="text-4xl font-bold text-white mb-2">
                    {events.reduce((sum, e) => sum + (e.current_participants || 0), 0)}
                  </div>
                  <div className="text-purple-200">Lượt đăng ký</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Wave Bottom */}
        <div className="absolute bottom-0 left-0 w-full overflow-hidden">
          <svg className="relative block w-full h-20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 120" preserveAspectRatio="none">
            <path d="M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z" fill="rgb(249, 250, 251)"></path>
          </svg>
        </div>
      </section>

      {/* Search & Filter Section */}
      <section className="bg-gray-50 py-12 -mt-10 relative z-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="bg-white rounded-3xl shadow-xl p-8">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              {/* Search */}
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  type="text"
                  placeholder="Tìm kiếm sự kiện..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-400 focus:ring-purple-200 bg-gray-50 focus:bg-white transition-all"
                />
              </div>
              
              {/* Filter */}
              <div className="relative">
                <Filter className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5 z-10" />
                <select
                  value={selectedFilter}
                  onChange={(e) => setSelectedFilter(e.target.value)}
                  className="pl-12 pr-8 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-400 focus:ring-purple-200 bg-gray-50 focus:bg-white appearance-none min-w-[200px] transition-all"
                >
                  <option value="all">Tất cả sự kiện</option>
                  <option value="upcoming">Sắp diễn ra</option>
                  <option value="ongoing">Đang diễn ra</option>
                  <option value="completed">Đã kết thúc</option>
                </select>
              </div>
              
              {/* Refresh Button */}
              <Button 
                onClick={fetchEvents} 
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all"
              >
                <RefreshCw className="w-5 h-5 mr-2" />
                Làm mới
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Events Section */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {filteredEvents.length === 0 ? (
            <div className="text-center py-16">
              <div className="bg-white rounded-3xl p-12 max-w-md mx-auto shadow-xl">
                <Sparkles className="w-16 h-16 mx-auto text-purple-400 mb-6" />
                <h3 className="text-2xl font-bold text-gray-700 mb-4">Không tìm thấy sự kiện</h3>
                <p className="text-gray-500">Thử thay đổi từ khóa tìm kiếm hoặc bộ lọc</p>
              </div>
            </div>
          ) : (
            <>
              {/* Featured Event (First Event as Hero) */}
              {filteredEvents.length > 0 && (
                <div className="mb-16">
                  <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center">
                    Sự kiện nổi bật
                  </h2>
                  <div className="bg-white rounded-3xl overflow-hidden shadow-2xl hover:shadow-3xl transition-all duration-300">
                    <div className="lg:flex">
                      <div className="lg:w-1/2">
                        <img
                          src={filteredEvents[0].image_url || "/placeholder.svg"}
                          alt={filteredEvents[0].title}
                          className="w-full h-64 lg:h-96 object-cover"
                        />
                      </div>
                      <div className="lg:w-1/2 p-8 lg:p-12 flex flex-col justify-center">
                        <div className="flex items-center gap-3 mb-4">
                          <Badge className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-4 py-2">
                            {filteredEvents[0].status === 'upcoming' && '🎯 Sắp diễn ra'}
                            {filteredEvents[0].status === 'ongoing' && '🔥 Đang diễn ra'}
                            {filteredEvents[0].status === 'completed' && '✅ Đã hoàn thành'}
                          </Badge>
                        </div>
                        
                        <h3 className="text-3xl font-bold text-gray-800 mb-4">
                          {filteredEvents[0].title}
                        </h3>
                        
                        <p className="text-gray-600 mb-6 text-lg">
                          {filteredEvents[0].description}
                        </p>
                        
                        <div className="space-y-3 mb-6">
                          <div className="flex items-center gap-3 text-gray-600">
                            <Calendar className="w-5 h-5 text-purple-500" />
                            <span className="font-medium">{new Date(filteredEvents[0].start_date).toLocaleDateString('vi-VN')}</span>
                          </div>
                          
                          <div className="flex items-center gap-3 text-gray-600">
                            <MapPin className="w-5 h-5 text-pink-500" />
                            <span>{filteredEvents[0].location}</span>
                          </div>
                          
                          <div className="flex items-center gap-3 text-blue-600">
                            <Users className="w-5 h-5" />
                            <span className="font-medium">
                              {filteredEvents[0].current_participants || 0} người đã đăng ký
                            </span>
                          </div>
                        </div>
                        
                        <div className="flex gap-4">
                          <Link 
                            to={`/events/${filteredEvents[0].id}`}
                            className="flex-1"
                          >
                            <Button className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white py-3 rounded-xl">
                              Xem chi tiết
                            </Button>
                          </Link>
                          <Button 
                            onClick={() => handleRegister(filteredEvents[0])}
                            className="bg-gradient-to-r from-pink-500 to-orange-500 hover:from-pink-600 hover:to-orange-600 text-white px-8 py-3 rounded-xl"
                          >
                            Đăng ký ngay
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Other Events Grid */}
              {filteredEvents.length > 1 && (
                <div>
                  <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center">
                    Tất cả sự kiện
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {filteredEvents.slice(1).map((event) => (
                      <Card key={event.id} className="group hover:shadow-2xl transition-all duration-500 bg-white border-0 shadow-lg overflow-hidden rounded-2xl hover:-translate-y-2">
                        {/* Event Image */}
                        <div className="relative h-48 overflow-hidden">
                          <img
                            src={event.image_url || "/placeholder.svg"}
                            alt={event.title}
                            className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                          />
                          
                          {/* Status Badge */}
                          <div className="absolute top-4 left-4">
                            <Badge 
                              className={`px-3 py-1 text-xs font-medium ${
                                event.status === 'upcoming' ? 'bg-blue-500 text-white' :
                                event.status === 'ongoing' ? 'bg-green-500 text-white' :
                                'bg-gray-500 text-white'
                              }`}
                            >
                              {event.status === 'upcoming' && '🎯 Sắp diễn ra'}
                              {event.status === 'ongoing' && '🔥 Đang diễn ra'}
                              {event.status === 'completed' && '✅ Hoàn thành'}
                            </Badge>
                          </div>
                          
                          {/* Gradient Overlay */}
                          <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent"></div>
                        </div>

                        <CardContent className="p-6">
                          <h3 className="text-xl font-bold text-gray-800 mb-3 group-hover:text-purple-600 transition-colors">
                            {event.title}
                          </h3>
                          
                          <p className="text-gray-600 mb-4 line-clamp-2">
                            {event.description}
                          </p>
                          
                          {/* Event Details */}
                          <div className="space-y-3 mb-6">
                            <div className="flex items-center gap-3 text-gray-600">
                              <Calendar className="w-4 h-4 text-purple-500" />
                              <span className="text-sm font-medium">{new Date(event.start_date).toLocaleDateString('vi-VN')}</span>
                            </div>
                            
                            <div className="flex items-center gap-3 text-gray-600">
                              <MapPin className="w-4 h-4 text-pink-500" />
                              <span className="text-sm truncate">{event.location}</span>
                            </div>
                            
                            <div className="flex items-center gap-3 text-blue-600">
                              <Users className="w-4 h-4" />
                              <span className="text-sm font-medium">
                                {event.current_participants || 0} người đăng ký
                                {event.max_participants && (
                                  <span className="text-gray-500">
                                    / {event.max_participants}
                                  </span>
                                )}
                              </span>
                            </div>
                          </div>

                          {/* Tags */}
                          {event.tags && event.tags.length > 0 && (
                            <div className="flex flex-wrap gap-2 mb-4">
                              {event.tags.slice(0, 2).map((tag) => (
                                <Badge
                                  key={tag.tag_name}
                                  variant="outline"
                                  className="text-xs bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200 text-purple-700"
                                >
                                  {tag.tag_name}
                                </Badge>
                              ))}
                              {event.tags.length > 2 && (
                                <Badge variant="outline" className="text-xs text-gray-500">
                                  +{event.tags.length - 2}
                                </Badge>
                              )}
                            </div>
                          )}

                          {/* Action Buttons */}
                          <div className="flex gap-3">
                            <Link 
                              to={`/events/${event.id}`}
                              className="flex-1"
                            >
                              <Button 
                                variant="outline" 
                                className="w-full border-purple-200 text-purple-600 hover:bg-purple-50 hover:border-purple-300 rounded-xl"
                              >
                                Chi tiết
                              </Button>
                            </Link>
                            <Button 
                              onClick={() => handleRegister(event)}
                              className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-6 rounded-xl"
                            >
                              Đăng ký
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              )}
            </>
          )}
        </div>
      </section>

      {/* Registration Modal */}
      {showRegistrationModal && selectedEvent && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-3xl p-8 max-w-md w-full max-h-[90vh] overflow-y-auto shadow-2xl">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-2xl font-bold text-gray-800">Đăng ký sự kiện</h3>
              <button
                onClick={() => setShowRegistrationModal(false)}
                className="text-gray-400 hover:text-gray-600 text-2xl"
              >
                ×
              </button>
            </div>
            
            <div className="mb-6">
              <h4 className="text-lg font-semibold text-purple-600 mb-2">{selectedEvent.title}</h4>
              <p className="text-sm text-gray-600">📅 {selectedEvent.start_date}</p>
              <p className="text-sm text-gray-600">📍 {selectedEvent.location}</p>
            </div>
            
            <form onSubmit={handleRegistration} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Họ và tên *
                </label>
                <input
                  type="text"
                  required
                  value={registrationData.student_name}
                  onChange={(e) => setRegistrationData({...registrationData, student_name: e.target.value})}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-400 focus:ring-purple-200"
                  placeholder="Nguyễn Văn A"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Mã số sinh viên *
                </label>
                <input
                  type="text"
                  required
                  value={registrationData.student_id}
                  onChange={(e) => setRegistrationData({...registrationData, student_id: e.target.value})}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-400 focus:ring-purple-200"
                  placeholder="SE123456"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Upload ảnh *
                </label>
                <input
                  type="file"
                  accept="image/*"
                  required
                  onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-purple-400 focus:ring-purple-200"
                />
              </div>
              
              <div className="flex items-center gap-3">
                <input
                  type="checkbox"
                  id="confirmed"
                  checked={registrationData.confirmed}
                  onChange={(e) => setRegistrationData({...registrationData, confirmed: e.target.checked})}
                  className="w-4 h-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
                />
                <label htmlFor="confirmed" className="text-sm text-gray-700">
                  Tôi xác nhận sẽ tham gia sự kiện này
                </label>
              </div>
              
              <Button
                type="submit"
                disabled={registering || !registrationData.confirmed}
                className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white py-3 rounded-xl shadow-lg hover:shadow-xl transition-all disabled:opacity-50"
              >
                {registering ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Đang xử lý...
                  </>
                ) : (
                  'Đăng ký ngay'
                )}
              </Button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
                        ${event.status === 'upcoming' ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white' : ''}
                        ${event.status === 'ongoing' ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white' : ''}
                        ${event.status === 'completed' ? 'bg-gradient-to-r from-gray-400 to-gray-500 text-white' : ''}
                        font-medium shadow-lg
                      `}
                    >
                      {event.status === 'upcoming' && '🚀 Sắp diễn ra'}
                      {event.status === 'ongoing' && '🔥 Đang diễn ra'}
                      {event.status === 'completed' && '✅ Đã kết thúc'}
                    </Badge>
                  </div>

                  {/* Like Button */}
                  <button
                    onClick={() => handleLike(event.id)}
                    className="absolute top-4 right-4 bg-white/90 backdrop-blur-sm rounded-full p-2 hover:bg-white transition-colors shadow-lg"
                  >
                    <Heart className="w-5 h-5 text-red-500" />
                  </button>
                </div>

                <CardHeader className="pb-4">
                  <div className="flex items-start justify-between gap-4">
                    <CardTitle className="text-xl font-bold text-gray-800 group-hover:text-purple-600 transition-colors line-clamp-2">
                      {event.title}
                    </CardTitle>
                  </div>
                  
                  <CardDescription className="text-gray-600 line-clamp-3 text-base leading-relaxed">
                    {event.description}
                  </CardDescription>
                </CardHeader>

                <CardContent className="space-y-4">
                  {/* Event Details */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-3 text-gray-600">
                      <Calendar className="w-5 h-5 text-purple-500" />
                      <span className="font-medium">{new Date(event.start_date).toLocaleDateString('vi-VN')}</span>
                    </div>
                    
                    <div className="flex items-center gap-3 text-gray-600">
                      <Clock className="w-5 h-5 text-pink-500" />
                      <span>{event.start_time || 'Chưa có thời gian'}</span>
                    </div>
                    
                    <div className="flex items-center gap-3 text-gray-600">
                      <MapPin className="w-5 h-5 text-cyan-500" />
                      <span className="line-clamp-1">{event.location}</span>
                    </div>
                    
                    <div className="flex items-center gap-3 text-gray-600">
                      <Users className="w-5 h-5 text-green-500" />
                      <span className="font-medium text-blue-600">
                        {event.current_participants || 0} người đã đăng ký
                      </span>
                      {event.max_participants && (
                        <span className="text-gray-500">
                          / {event.max_participants} tối đa
                        </span>
                      )}
                    </div>
                  </div>

                  {/* Tags */}
                  {event.tags && event.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2">
                      {event.tags.slice(0, 3).map((tag) => (
                        <Badge
                          key={tag.tag_name}
                          variant="outline"
                          className="text-xs bg-gradient-to-r from-purple-100 to-pink-100 border-purple-200 text-purple-700"
                        >
                          {tag.tag_name}
                        </Badge>
                      ))}
                      {event.tags.length > 3 && (
                        <Badge variant="outline" className="text-xs text-gray-500">
                          +{event.tags.length - 3}
                        </Badge>
                      )}
                    </div>
                  )}

                  {/* Action Buttons */}
                  <div className="flex gap-3 pt-4">
                    <Link to={`/events/${event.id}`} className="flex-1">
                      <Button 
                        variant="outline" 
                        className="w-full border-purple-200 text-purple-600 hover:bg-purple-50 hover:border-purple-300"
                      >
                        <Star className="w-4 h-4 mr-2" />
                        Chi tiết
                      </Button>
                    </Link>
                    
                    <Button 
                      onClick={() => openRegistrationModal(event)}
                      className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-lg"
                      disabled={event.status === 'completed'}
                    >
                      <UserPlus className="w-4 h-4 mr-2" />
                      Đăng ký
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </main>

      {/* Registration Modal */}
      <Dialog open={showRegistrationModal} onOpenChange={setShowRegistrationModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              Đăng ký tham gia - Brothers2025
            </DialogTitle>
          </DialogHeader>
          
          {selectedEvent && (
            <div className="space-y-6">
              <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-4 rounded-lg">
                <h3 className="font-semibold text-gray-800">{selectedEvent.title}</h3>
                <p className="text-sm text-gray-600 mt-1">
                  📅 {new Date(selectedEvent.start_date).toLocaleDateString('vi-VN')} • 🕒 {selectedEvent.start_time || 'Chưa có thời gian'}
                </p>
                <p className="text-sm text-gray-600">📍 {selectedEvent.location}</p>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="student_name" className="text-sm font-medium text-gray-700">
                    Họ và tên <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="student_name"
                    type="text"
                    value={registrationData.student_name}
                    onChange={(e) => setRegistrationData(prev => ({ ...prev, student_name: e.target.value }))}
                    className="mt-1 border-purple-200 focus:border-purple-400 focus:ring-purple-200"
                    placeholder="Nhập họ và tên của bạn"
                  />
                </div>

                <div>
                  <Label htmlFor="student_id" className="text-sm font-medium text-gray-700">
                    Mã số sinh viên <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="student_id"
                    type="text"
                    value={registrationData.student_id}
                    onChange={(e) => setRegistrationData(prev => ({ ...prev, student_id: e.target.value }))}
                    className="mt-1 border-purple-200 focus:border-purple-400 focus:ring-purple-200"
                    placeholder="Ví dụ: SE123456"
                  />
                </div>

                <div>
                  <Label htmlFor="student_image" className="text-sm font-medium text-gray-700">
                    Ảnh đại diện <span className="text-red-500">*</span>
                  </Label>
                  <div className="mt-1 flex items-center gap-3">
                    <Input
                      id="student_image"
                      type="file"
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="flex-1 border-purple-200 focus:border-purple-400 focus:ring-purple-200"
                    />
                    <Upload className="w-5 h-5 text-purple-500" />
                  </div>
                  {registrationData.student_image && (
                    <p className="text-sm text-green-600 mt-1">
                      ✅ Đã chọn: {registrationData.student_image.name}
                    </p>
                  )}
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="confirmed"
                    checked={registrationData.confirmed}
                    onCheckedChange={(checked) => setRegistrationData(prev => ({ ...prev, confirmed: !!checked }))}
                  />
                  <Label 
                    htmlFor="confirmed" 
                    className="text-sm text-gray-700 cursor-pointer"
                  >
                    Tôi xác nhận sẽ tham gia sự kiện này <span className="text-red-500">*</span>
                  </Label>
                </div>
              </div>

              <div className="flex gap-3 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={closeRegistrationModal}
                  className="flex-1"
                >
                  Hủy
                </Button>
                <Button
                  type="button"
                  onClick={handleRegistration}
                  disabled={
                    !registrationData.student_name || 
                    !registrationData.student_id || 
                    !registrationData.student_image || 
                    !registrationData.confirmed ||
                    registering
                  }
                  className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                >
                  {registering ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Đang đăng ký...
                    </>
                  ) : (
                    'Xác nhận đăng ký'
                  )}
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
